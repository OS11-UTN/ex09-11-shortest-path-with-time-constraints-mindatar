import numpy as np
from scipy.optimize import linprog
from basic_utils import nn2na, get_usage_string, get_min_cut, get_selected_arcs
###############################################################################
# Conclusion(1,2,3) : Usando el simplex revisado , para una restricción en tiempo de
# T=8 , sigue mostrando el valor mínimo , sin mostrar los arcos, además es como
# que particiona los mismo.  con T=9 , funciona correctamente por que la restricicón
# de tiempo , empatiza con el pedido de la función objetivo , es decir el camino
# más corto encontrado , tiene valores en tiempo , dentro de la restrición impuesta.
# El algoritmo no se vuelve loco con la restricción T= 9 , pero si con la T=8
# 3) Lo que se me ocurre es relajar , pero no se bien como .. aprendo lagrange.
##############################################################################
# IMPORT THE DATA:
NN = np.array([[0, 1, 1, 0, 0, 0],
               [0, 0, 0, 1, 0, 1],
               [0, 0, 0, 0, 1, 0],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 0]])

# DATA MANIPULATION:
Aeq, arc_idxs = nn2na(NN)
C = np.array([2, 1, 2, 5, 2, 1, 2])
beq = np.array([1, 0, 0, 0, 0, -1])

bounds = tuple([(0, 3),(0,1),(0,3),(0,1),(0,3),(0,3),(0,5)])

# Este es un vector y va por definición con [[]] como si fuese una matriz , asi lo acept Py.
t=[[3,1,3,1,3,1,5]]

# Tambien aunque es sólo un valor , va como vector.
# Parámetros de linprog.
# scipy.optimize.linprog(c, A_ub=None, b_ub=None, A_eq=None, b_eq=None, bounds=None, method=’interior-point’, callback=None, options=None, x0=None)
#
#c : es el vector de pesos o coeficientes de la funcion costo.
# A_ub: es la matriz de coeficientes para el sistema de restricciones “menos que”.
# b_u: es el vector de coeficientes libres en el sistema de ecuaciones.
# A_eq (opcional): es la matriz de coeficientes para el sistema de restricciones “igual que”.
# b_eq (opcional):es el vector de coeficientes libres en el sistema de ecuaciones de igualdad.
# bounds(opcional): lista de tuplas(min,max) para cada variable x
# method: cadena de texto del metodo a utilizar y tenemos 3 opciones
# ‘interior-point’ (en defecto)
# ‘revised simplex’ (recomendado)
# ‘simplex’ (obsoleto)
# x0: valores inciciales para inciar el proceso iterativo

bu = [9]
print('## Optimizer inputs ## \n'
      'Cost vector: %s \n '
      'A_eq Node-Arc matrix:\n%s \n'
      'b_eq demand-supply vector: %s \n'
      'Bounds of each X arc variable: %s \n' % (C, Aeq, beq, bounds))

# OPTIMIZE:
res = linprog(C,A_ub=t,b_ub=bu ,A_eq=Aeq, b_eq=beq, bounds=bounds, method='revised simplex' )

# GET THE SOLUTION:
selarcs = get_selected_arcs(arc_idxs,res.x )

print('## Results ## ')
print ('The row solution  will be : %s ' % res.x)
print ('The arcs that make the shortest path will be (from , to ) : %s ' % selarcs)
print ('The minimo cantidd de kmstr a caminar  will be : %0.2f ' % res.fun )
