import numpy as np
import array
import matplotlib.pyplot as plt
from scipy.optimize import linprog
from basic_utils import nn2na, get_usage_string, get_min_cut, get_selected_arcs

#  Marco Inda
#  Problema de Relajación aplicando Lagrange.
#  Conclusion : Con este metodo , y encontrando lambda : 0.434 , como mejor valor , y realizando
#  una busqueda de 100 valores.
#  la funcion de L(lagrange) , se hace máximo en el punto lambda = 0,434
#  En ese punto es dual y primal se aproximan y toman el mejor valor de función objetivo.
#  Los arcos encontrados ( (0,1), (1,5) , son los correctos
#

# IMPORT THE DATA:
# misma matriz del ej. 10
NN = np.array([[0, 1, 1, 0, 0, 0],
               [0, 0, 0, 1, 0, 1],
               [0, 0, 0, 0, 1, 0],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 0]])

# DATA MANIPULATION:
Aeq, arc_idxs = nn2na(NN)

C = np.array([2, 1, 2, 5, 2, 1, 2])
# des marco el valor de C por que itero en la solución abajo.
beq = np.array([1, 0, 0, 0, 0, -1])
# vector donde quiero rescatar las ejecuciones, los valores.

VLagy=[]

bounds = tuple([(0, 3),(0,1),(0,3),(0,1),(0,3),(0,3),(0,5)])

# Este es un vector y va por definición con [[]] como si fuese una matriz , asi lo acept Py.

bu =[8]
## Codigo de Rodrigo

# Ojo que t se define como un array [[]] doble corchete así lo requiere linprog.
t = np.array([[3, 1 ,3 ,1 ,3, 1, 5]])

# Estos son los tiempos
vector_de_lambdas = np.linspace(0, 1, 100) # armo un vector con 100 valores de lambda entre 0 y 1


for lambda_i in vector_de_lambdas:

       C_lagrange = C + lambda_i * t

       # a partir de acá optimizamos.
       res = linprog(C_lagrange, A_ub=t, b_ub=bu, A_eq=Aeq, b_eq=beq, bounds=bounds, method='revised simplex')
       Dual = res.fun  - lambda_i * 8
       VLagy.append(Dual)

##

print('## Optimizer inputs ## \n'
      'A_eq Node-Arc matrix:\n%s \n'
      'b_eq demand-supply vector: %s \n'
      'Bounds of each X arc variable: %s \n' % ( Aeq, beq, bounds))

# OPTIMIZE:

# GET THE SOLUTION:
selarcs = get_selected_arcs(arc_idxs,res.x )

print('## Results ## ')
print(' arcos : ', selarcs )
print ('The row solution  will be el último res. alcanzado : %s ' % res)
print ( " valores de res : ", VLagy)
plt.plot ( vector_de_lambdas, VLagy)
plt.show()
