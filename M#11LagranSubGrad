import numpy as np
import array
import matplotlib.pyplot as plt
from scipy.optimize import linprog
from basic_utils import nn2na, get_usage_string, get_min_cut, get_selected_arcs

#  Marco Inda
#  Problema de Relajación aplicando Lagrange con heurista de SubGradiente.
#  Este algoritmo nos ayuda a encontrar el Lambda optimo , y el Max
#  Valor de la función de Lagrange, que me permite converger al min. costo
#  de la función objetivo Relajada ( con penalización ).
#  En este caso parececiese ser: lambda: 3.9994 , Fun-Obj. 8.58
#

# IMPORT THE DATA:
# misma matriz del ej. 10
NN = np.array([[0, 1, 1, 0, 0, 0],
               [0, 0, 0, 1, 0, 1],
               [0, 0, 0, 0, 1, 0],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 0]])

# DATA MANIPULATION:
Aeq, arc_idxs = nn2na(NN)

C = np.array([2, 1, 2, 5, 2, 1, 2])
# des marco el valor de C por que itero en la solución abajo.
beq = np.array([[1, 0, 0, 0, 0, -1]])
# vector donde quiero rescatar las ejecuciones, los valores.


bounds = tuple([(0, None),(0,None),(0,None),(0,None),(0,None),(0,None),(0,None)])

# Este es un vector y va por definición con [[]] como si fuese una matriz , asi lo acept Py.

bu =[8]
## Codigo de Rodrigo

# Ojo que t se define como un array [[]] doble corchete así lo requiere linprog.
t = np.array([3, 1 ,3 ,1 ,3, 3, 5])

##
##  Metodo de Lagrange con SubGradiente
##  Lambu será Lambda
##  tol Tolerancia 10-3
lambu = 0
tol = 0.001
diff = 0.1
i = 1
V1 =[]
V2 =[]
V3= []
while diff > tol :
    C_lagrange = C + lambu * t
    res= linprog(C_lagrange,  A_eq=Aeq, b_eq=beq, bounds=bounds, method='revised simplex')
    L = res.fun - (lambu * 8)
    LG = (t @ res.x) - 8
    step = 1/i
    ant = lambu
    lambu = lambu + step * LG
    diff = abs(lambu-ant)
    V1.append(lambu)
    V2.append(LG)
    V3.append(res.fun)

    i = i + 1

# OPTIMIZE:
selarcs = get_selected_arcs(arc_idxs,res.x )

# GET THE SOLUTION:
#selarcs = get_selected_arcs(arc_idxs,res.x )

print('## Results ## ')
print ('The row solution  will be el último res. alcanzado , lamda :  ' , lambu)
print ( ' Arcos selecionados : ', selarcs )
print ('The valor de Lagrange  :  ' , LG)
print ( " el valor de la funcion Obetivo ", res)
# Grafico lambda(x) Vs LG(y)
plt.plot ( V1, V2)
plt.show()
#Grafico Lambda(x) , Fun-objetivo (Y)
plt.plot ( V1, V3)
plt.show()
