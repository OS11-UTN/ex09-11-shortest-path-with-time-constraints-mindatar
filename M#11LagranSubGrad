import numpy as np
import array
import matplotlib.pyplot as plt
from scipy.optimize import linprog
from basic_utils import nn2na, get_usage_string, get_min_cut, get_selected_arcs

#  Marco Inda
#  Problema de Relajación aplicando Lagrange.
#  Conclusion : Con este metodo , y encontrando lambda : 0.434 , como mejor valor , y realizando
#  una busqueda de 100 valores.
#  la funcion de L(lagrange) , se hace máximo en el punto lambda = 0,434
#  En ese punto es dual y primal se aproximan y toman el mejor valor de función objetivo.
#  Los arcos encontrados ( (0,1), (1,5) , son los correctos
#

# IMPORT THE DATA:
# misma matriz del ej. 10
NN = np.array([[0, 1, 1, 0, 0, 0],
               [0, 0, 0, 1, 0, 1],
               [0, 0, 0, 0, 1, 0],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 0]])

# DATA MANIPULATION:
Aeq, arc_idxs = nn2na(NN)

C = np.array([2, 1, 2, 5, 2, 1, 2])
# des marco el valor de C por que itero en la solución abajo.
beq = np.array([[1, 0, 0, 0, 0, -1]])
# vector donde quiero rescatar las ejecuciones, los valores.


bounds = tuple([(0, None),(0,None),(0,None),(0,None),(0,None),(0,None),(0,None)])

# Este es un vector y va por definición con [[]] como si fuese una matriz , asi lo acept Py.

bu =[8]
## Codigo de Rodrigo

# Ojo que t se define como un array [[]] doble corchete así lo requiere linprog.
t = np.array([[3, 1 ,3 ,1 ,3, 3, 5]])

##
##  Metodo de Lagrange con SubGradiente
##  Lambu será Lambda
##  tol Tolerancia 10-3
lambu = 0
tol = 0.001
diff = 0.01
i = 1000
while diff > tol :
    C_lagrange = C + lambu * t
    res= linprog(C_lagrange,  A_eq=Aeq, b_eq=beq, bounds=bounds, method='revised simplex')
    L = res.fun - (lambu * 8)
    LG = (t * res.x) - 8
    step = 1/i
    ant = lambu
    lambu = lambu + step * LG
    diff = lambu-ant
    print(" step ", step)
    print ("C_lagrange ", C_lagrange)
    print ("L : ", L )
    print (" lG .. : ", LG)
    print ( " res-fun .. : ", res.fun)
    print ( " difre" , diff)
    print  ( "lambda ", lambu)
    i = i + 1

print('## Optimizer inputs ## \n'
      'A_eq Node-Arc matrix:\n%s \n'
      'b_eq demand-supply vector: %s \n'
      'Bounds of each X arc variable: %s \n' % ( Aeq, beq, bounds))

# OPTIMIZE:

# GET THE SOLUTION:
#selarcs = get_selected_arcs(arc_idxs,res.x )

print('## Results ## ')
print ('The row solution  will be el último res. alcanzado :  ' , lambu)
print ('The valor de la función ulitma  :  ' , LG)
